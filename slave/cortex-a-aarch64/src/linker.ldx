#ifndef FLASHSTART
  #define FLASH SRAM
#endif

#ifndef RAMSTART
  #define RAMSTART 0x20000000
#endif

#ifndef RAMSIZE
  #define RAMSIZE 32K
#endif

#ifndef FLASHSIZE
  #define FLASHSIZE 128K
#endif

#ifndef STACKSIZE
  #define STACKSIZE 0x200
#endif

#ifndef ETRSIZE
  #define ETRSIZE 0x0
#endif

#ifndef ETRALIGN
  #define ETRALIGN 0x100
#endif

MEMORY
{
#ifdef FLASHSTART
    FLASH (rx) : ORIGIN = FLASHSTART, LENGTH = FLASHSIZE
#endif
    SRAM (rwx) : ORIGIN = RAMSTART, LENGTH = RAMSIZE
}

SECTIONS
{
#if defined(BOOTI_HEADER)
    .booti_header :
    {
        LONG(0xaa0003fc) /* mov x28,x0 - store DTB */
        LONG(0x14000000+((ADDR(.text)-RAMSTART-4)>>2)) /* jump  b .text */
        QUAD(0x0)        /* 0x0 - load_offset */
        QUAD(RAMSIZE)    /* image size */
        QUAD(0xa)        /* LE, 4k, PIC code - flags */
        QUAD(0x0)        /* reserved */
        QUAD(0x0)        /* reserved */
        QUAD(0x0)        /* reserved */
        LONG(0x644d5241) /* ARMx64 - magic */
        LONG(0x0)        /* reserved */
    } > FLASH
#endif
    .isr_vector : ALIGN(0x800)
    {
        __isr_base = . ;
        KEEP(*(.isr_vector))
    } > FLASH =0x00

    .text : ALIGN(0x80)
    {
        KEEP(*(.text.crt*))
        *(.text*)
        . = ALIGN(4);
        _etext = .;
    } > FLASH

    .eh_frame_hdr : ALIGN (0x8)
    {
        KEEP (*(.eh_frame_hdr))
        *(.eh_frame_entry .eh_frame_entry.*)
    } > FLASH
    .eh_frame : ALIGN (0x8)
    {
        KEEP (*(.eh_frame))
        KEEP (*(.eh_frame.*))
    } > FLASH
    .gcc_except_table : ALIGN (0x8)
    {
        KEEP (*(.gcc_except_table))
        KEEP (*(.gcc_except_table.*))
    } > FLASH
    .ARM.exidx : ALIGN (0x8)
    {
        __exidx_start = .;
        KEEP(*(.ARM.exidx*))
        KEEP(*(.gnu.linkonce.armexidx.*))
        __exidx_end = .;
    } > FLASH

    .rodata :
    {
        *(.rodata*)
        *(.constdata*)
        . = ALIGN(8);
    } > FLASH

    .data :
    {
        __data_start = . ;
        __data = .;
        *(vtable*)
        *(.data*)
        . = ALIGN(4);
        __data_end = .;
    } > SRAM AT> FLASH

    .init : ALIGN(0x8)
    {
        PROVIDE_HIDDEN (__init_array_start = .);
        KEEP (*(.preinit_array))
        KEEP (*(.init))
        KEEP (*(SORT(.init_array.*)))
        KEEP (*(.init_array))
        PROVIDE_HIDDEN (__init_array_end = .);
    } > SRAM AT> FLASH

    .bss : ALIGN(6) {
        __bss_start = .;
        * (.sbss)
        * (.bss*)
        * (COMMON)
        . = ALIGN(4);
        __bss_end = .;
    } > SRAM

    .stack :
    {
        . = ALIGN(0x8);
        __stack_start = .;
        . += STACKSIZE;
        __stack_end = .;
    } > SRAM

    __heap_start = .;

    .stack_mp (RAMSTART+RAMSIZE-3*STACKSIZE-ETRSIZE-((RAMSTART+RAMSIZE)&(ETRALIGN-1))) :
    {
        __stack_start_mp = .;
        . += 3*STACKSIZE;
        __stack_end_mp = .;
    } > SRAM

#if ETRSIZE>0x0
    .etr ALIGN(ETRALIGN):
    {
        __etr_start = .;
        . += ETRSIZE;
        __etr_end = .;
    } > SRAM
#endif
}

__SRAM_start = ORIGIN(SRAM);
__SRAM_size  = LENGTH(SRAM);
__data_vaddr = ADDR(.data);
__data_laddr = LOADADDR(.data);
__data_size  = SIZEOF(.data);
__init_vaddr = ADDR(.init);
__init_laddr = LOADADDR(.init);
__init_size  = SIZEOF(.init);
__stack_size = STACKSIZE;
